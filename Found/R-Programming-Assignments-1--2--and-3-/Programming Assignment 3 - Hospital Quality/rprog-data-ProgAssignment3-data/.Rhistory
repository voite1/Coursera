print(num)
if (length(new_data[,2]) < num) {
NA
#stop(NA)
}
else {
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#get rid of the NA's in the desired outcome column
new_data[, outcome_column] <- as.numeric(new_data[,outcome_column])
#print("new_data")
#print(new_data[, outcome_column])
bad <- is.na(new_data[, outcome_column])
desired_data <- new_data[!bad, ]
#print("desired_data")
#print(desired_data[, outcome_column])
#arrange the modified dataframe in ascending order of the outcome values
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column_name], desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
ordered_desired_data[num, 2]
}
}
}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#browser()
#check if the state and outcomes are valid
states <- data[ , 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
if (is.numeric(num) == TRUE) {
print(length(new_data[,2]))
print(num)
if (length(new_data[,2]) < num) {
NA
#stop(NA)
}
else {
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#get rid of the NA's in the desired outcome column
new_data[, outcome_column] <- as.numeric(new_data[,outcome_column])
#print("new_data")
#print(new_data[, outcome_column])
bad <- is.na(new_data[, outcome_column])
desired_data <- new_data[!bad, ]
#print("desired_data")
#print(desired_data[, outcome_column])
#arrange the modified dataframe in ascending order of the outcome values
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column_name], desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
ordered_desired_data[num, 2]
}
}
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#browser()
#check if the state and outcomes are valid
states <- data[ , 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
if (is.numeric(num) == TRUE) {
print(length(data[,2]))
print(num)
if (length(data[,2]) < num) {
NA
#stop(NA)
}
else {
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#get rid of the NA's in the desired outcome column
new_data[, outcome_column] <- as.numeric(new_data[,outcome_column])
#print("new_data")
#print(new_data[, outcome_column])
bad <- is.na(new_data[, outcome_column])
desired_data <- new_data[!bad, ]
#print("desired_data")
#print(desired_data[, outcome_column])
#arrange the modified dataframe in ascending order of the outcome values
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column_name], desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
ordered_desired_data[num, 2]
}
}
}
rankhospital("TX", "heart failure", 4)''
rankhospital("TX", "heart failure", 4)''
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4000000)
?return
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#browser()
#check if the state and outcomes are valid
states <- data[ , 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
if (is.numeric(num) == TRUE) {
if (length(data[,2]) < num) {
return NA
}
}
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#get rid of the NA's in the desired outcome column
new_data[, outcome_column] <- as.numeric(new_data[,outcome_column])
#print("new_data")
#print(new_data[, outcome_column])
bad <- is.na(new_data[, outcome_column])
desired_data <- new_data[!bad, ]
#print("desired_data")
#print(desired_data[, outcome_column])
#arrange the modified dataframe in ascending order of the outcome values
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column_name], desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
ordered_desired_data[num, 2]
}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#browser()
#check if the state and outcomes are valid
states <- data[ , 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
if (is.numeric(num) == TRUE) {
if (length(data[,2]) < num) {
return(NA)
}
}
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#get rid of the NA's in the desired outcome column
new_data[, outcome_column] <- as.numeric(new_data[,outcome_column])
#print("new_data")
#print(new_data[, outcome_column])
bad <- is.na(new_data[, outcome_column])
desired_data <- new_data[!bad, ]
#print("desired_data")
#print(desired_data[, outcome_column])
#arrange the modified dataframe in ascending order of the outcome values
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column_name], desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
ordered_desired_data[num, 2]
}
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4000000)
is.char('best')
is.char("best")
?is.integer
?char
?character
is.character("best")
is.character('best')
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#browser()
#check if the state and outcomes are valid
states <- data[ , 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
if (is.numeric(num) == TRUE) {
if (length(data[,2]) < num) {
return(NA)
}
}
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#get rid of the NA's in the desired outcome column
new_data[, outcome_column] <- as.numeric(new_data[,outcome_column])
#print("new_data")
#print(new_data[, outcome_column])
bad <- is.na(new_data[, outcome_column])
desired_data <- new_data[!bad, ]
#print("desired_data")
#print(desired_data[, outcome_column])
#arrange the modified dataframe in ascending order of the outcome values
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column_name], desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
if (is.character(num) == TRUE) {
if (num == "best") {
num = 1
}
else if (num == "worst") {
num = length(ordered_desired_data[, outcome_column])
}
}
ordered_desired_data[num, 2]
}
rankhospital("TX", "heart failure", 4000000)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("submitscript3.R")
source(rankhospital.R)
source("rankhospital.R")
submit()
submit()
submit()
submit()
submit()
1
submit()
submit()
submit()
source("rankhospital.R")
submit()
submit()
submit()
submit()
factor(outcome[,7])
?level
?levels
levels(outcome[,7])
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
levels(outcome[,7])
(outcome[,7]
)
names(outcome[,7])
name(outcome[,7])
factor(outcome[,7])
levels(factor(outcome[,7]))
?factor
x <- levels(factor(outcome[,7]))
x[1]
?vector
nobs <- vector(mode="character")
nobs
nobs.append("d")
nobs[1]("d")
nobs[1] <- "d"
nobs
nobs[3] <- "d"
nobs
x <- 20:30
seq(x)
x
rankall <- function(outcome, num = "best") {        ## Read outcome data        ## Check that state and outcome are valid## For each state, find the hospital of the given rank## Return a data frame with the hospital names and the## (abbreviated) state name                #read in the desired data        data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")        #create a list of states and initialize a character array to hold the                #required hospital names        states <- levels(factor(data[, 7]))        hospitals <- vector(mode="character")                 for (i in seq(states) {                hospitals[i] <- rankhospital(states[i], outcome, num)        }}
}
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#create a list of states and initialize a character array to hold the
#required hospital names
states <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(states) {
hospital[i] <- rankhospital(states[i], outcome, num)
}
dataframe(hospital, states)
}
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#create a list of states and initialize a character array to hold the
#required hospital names
states <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(states) {
hospital[i] <- rankhospital(states[i], outcome, num)
}
data.frame(hospital, states)
}
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#create a list of states and initialize a character array to hold the
#required hospital names
states <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(states)) {
hospital[i] <- rankhospital(states[i], outcome, num)
}
data.frame(hospital, states)
}
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#create a list of states and initialize a character array to hold the
#required hospital names
states <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(states)) {
hospital[i] <- rankhospital(states[i], outcome, num)
}
data.frame(hospital, states)
}
source("rankall.R")
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
#read in the desired data
#data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#create a list of states and initialize a character array to hold the
#required hospital names
states <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(states)) {
hospital[i] <- rankhospital(states[i], outcome, num)
}
data.frame(hospital, states)
}
source("rankall.R")
head(rankall("heart attack", 20), 10)
x <-head(rankall("heart attack", 20), 10)
x
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
submit()
submit()10
submit()10
submit()
submit()
class(output[,7])
class(outcome[,7])
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
#create a list of states and initialize a character array to hold the
#required hospital names
state <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(state)) {
hospital[i] <- rankhospital(state[i], outcome, num)
}
data.frame(hospital, state)
}
source("rankall.R")
submit()
submit()
submit()
tail(rankall("heart failure"), 10)
tail(rankall("pneumonia", "worst"), 3)
levels(factor(outcome[, 7]))
x <- levels(factor(outcome[, 7]))
x[1]
x[10]
levels(factor(outcome[, 7]))
levels(factor(outcome[, 7]))
tail(rankall("heart failure"), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#create a list of states and initialize a character array to hold the
#required hospital names
state <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(state)) {
hospital[i] <- rankhospital(state[i], outcome, num)
}
data.frame(hospital, state)
}
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
