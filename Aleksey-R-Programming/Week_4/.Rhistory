help.search("mapreduce")
help.search("mapr educe")
help.search("mapreduce")
help.search("map reduce")
help.search("histogram")
install.package("KernSmooth")
instal.package("KernSmooth")
library(devtools)
find.package("devtools")
install.packages("KernSmooth")
load(KernSmooth)
library(KernSmooth)
isntall.packages(c("slidify", "ggplot2", "devtools"))
install.packages(c("slidify", "ggplot2", "devtools"))
search()
library(devtools)
library(devtools)
search()
library(ggplot2)
library(ggplot2)
library(slidify)
library(slidify)
install.packages("slidify")
install.packages("devtools")
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
x <- c(1,2,3)
y <- c(4.5.6)
y <- c(4,5,6)
rbind(x,y)
g <- c(4,"a", TRUE)
typeof(g)
a <- 4
class(a)
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x[[1]])
x <- 1:4
y <- 3:3
x+y
y <-2:3
x+y
class(x+y)
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x -3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_aqrt <- sqrt(z - 1)
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0, 10, 100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10 by=0.5)
seq(0,10, by=0.5)
swq(5,10, lenth=30)
seq(5,10, lenth=30)
seq(5,10, length=30)
info()
nxt()
seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
x < num_vect >= 6
x <- num_vect >= 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Aleksey")
my_char <- c(my_char, "Aleksey")
my_name <- c(my_char, "Aleksey")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA, 5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
/0
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
names(vect2)
info()
nxt
nxt()
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_fector) <- c(4,5)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(data = 1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(matrix, matrix2)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cname <- c("patient", "age", "wight", "bp", "rating", "teests")
cname <- c("patient", "age", "wight", "bp", "rating", "teests")
cname <- c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
my_data <- data.frame(cnames, my_matrix)
my_data <- data.frame(cnames, my_data)
colnames(cnames, my_data)
help()
?dim
colnames(my_data) <- cnames
my_data
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11;17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_hsapes, range)
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3,4,5,5, 5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique-vals, length)
lapply(unique_vals, length)
sapply(unique_vals, length)
saply(flags, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
source('~/.active-rstudio-document')
f(2,3)
source('~/.active-rstudio-document')
print(a & b)
}
source('~/.active-rstudio-document')
f (2,3)
source('~/.active-rstudio-document')
f (2,3)
v <- matrix(1:6, nrow = 2, ncol = 3)
source('~/.active-rstudio-document')
f(v)
v
getwd()
setwd("C:/Users/Aleksey/Documents/GitHub/Aleksey-R-Programming/Week_4")
getwd()
rankall <- function(outcome, num = "best") {
# Read the data file
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
# Validate the outcomes, states, and rank (num)
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE) {
stop("invalid outcome")
} else if (num != "best" && num != "worst" && num < 1) {
stop("invalid num")
}
# Simplify the data by shrinking the data size and naming
# columns in the data.frame.  Found this approach on the web used by
# many other folks to simply data and calculations. Works very well
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
# Select rows with outcome data filed != 'Not Available'
data <- data[data[outcome] != 'Not Available', ]
# convert outcome filed to numberic and Order the data
data[, outcome] <- as.numeric(data[, outcome])
data <- data[order(data$name), ]
data <- data[order(data[outcome]), ]
# A function to get the best file per state
# takes in data frame, state, and rank
# copied from rankhospital.R and pasted into function
getHospital <- function(d_frame, s_state, rank) {
# Filter data.frame per state == s_state
d_frame <- d_frame[d_frame$state == s_state, ]
# Hold the vector of rankes per state
temp <- d_frame[, outcome]
# Determine the rank
if(rank == "best") {
row <- which.min(temp)
} else if(rank == "worst") {
row <- which.max(temp)
} else {
row <- rank
}
# return the name of the ranked hospital per state
d_frame[row, ]$name
}
# Isolate unique states
states <- data[, "state"]
states <- unique(states)
# Creating empty data frame to return once populated
ret_data <- data.frame("hospital"=character(0), "state"=character(0))
# Iterate through the states to find the num hospital in per state
# and add the results to the ret_data data.fram
for(s in states) {
h <- getHospital(data, s, num)
ret_data <- rbind(ret_data, data.frame(hospital=h, state=s))
}
# Return a data frame with the hospital names and the (abbreviated) state name
# ret_data is also being storted by state in decsending order
ret_data <- ret_data[order(ret_data["state"]), ]
# Return the list of hospitals and states
ret_data
}
ll
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit(manual=TRUE)
submit(manual=TRUE)
submit(manual=TRUE)
