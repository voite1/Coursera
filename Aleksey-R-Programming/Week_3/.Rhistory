library(ggplot2)
library(slidify)
library(slidify)
install.packages("slidify")
install.packages("devtools")
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
x <- c(1,2,3)
y <- c(4.5.6)
y <- c(4,5,6)
rbind(x,y)
g <- c(4,"a", TRUE)
typeof(g)
a <- 4
class(a)
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x[[1]])
x <- 1:4
y <- 3:3
x+y
y <-2:3
x+y
class(x+y)
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x -3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_aqrt <- sqrt(z - 1)
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0, 10, 100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10 by=0.5)
seq(0,10, by=0.5)
swq(5,10, lenth=30)
seq(5,10, lenth=30)
seq(5,10, length=30)
info()
nxt()
seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
x < num_vect >= 6
x <- num_vect >= 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Aleksey")
my_char <- c(my_char, "Aleksey")
my_name <- c(my_char, "Aleksey")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA, 5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
/0
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
names(vect2)
info()
nxt
nxt()
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_fector) <- c(4,5)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(data = 1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(matrix, matrix2)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cname <- c("patient", "age", "wight", "bp", "rating", "teests")
cname <- c("patient", "age", "wight", "bp", "rating", "teests")
cname <- c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
my_data <- data.frame(cnames, my_matrix)
my_data <- data.frame(cnames, my_data)
colnames(cnames, my_data)
help()
?dim
colnames(my_data) <- cnames
my_data
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11;17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_hsapes, range)
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3,4,5,5, 5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique-vals, length)
lapply(unique_vals, length)
sapply(unique_vals, length)
saply(flags, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
source('~/.active-rstudio-document')
f(2,3)
source('~/.active-rstudio-document')
print(a & b)
}
source('~/.active-rstudio-document')
f (2,3)
source('~/.active-rstudio-document')
f (2,3)
v <- matrix(1:6, nrow = 2, ncol = 3)
source('~/.active-rstudio-document')
f(v)
v
library(datasets)
data(iris)
mean(Sepal.Lenth)
mean(iris$Sepal.Lenth)
tapply(iris$Sepal.Lenth, iris$Species, mean)
tapply(iris$Sepal.Lenth, iris$Species, mean)
getwd()
setwd("C:\Users\Aleksey\Documents\GitHub\Aleksey-R-Programming\Week_3")
setwd("C:/Users/Aleksey/Documents/GitHub/Aleksey-R-Programming/Week_3")
getwd()
# Construct a metrix that holds its inverse
makeCacheMatrix <- function(m = matrix()) {
# variable to hold matrix inverse
inv <- NULL
# Setting matrix to mtrx and inv to NULL
setMatrix <- function(mtrx) {
m <<- mtrx
inv <<- NULL
}
# Returns the original matrix
getMatrix <- function() {
m
}
# Setting matrix inverse
setInverse <- function(inverse) {
inv <<- inverse
}
# Getting matrix inverse
getInverse <- function() {
inv
}
# Retuns list of methods available in makeCacheMatrix
list(setMatrix = setMatrix, getMatrix = getMatrix,
setInverse = setInverse, getInverse = getInverse)
}
# Obtaining an inverse of the matrix m_matrix produced by makeCacheMatrix
cacheSolve <- function(m_matrix, ...) {
# Test if m_matrix already has an inverse storred in it
if(!is.null(m_matrix$getInverse())) {
return(m_matrix$getInverse())
}
# Calculating matrix inverse in two steps below
# 1. Getting original matrix
temp <- m_matrix$getMatrix()
# 2. Calculating matrix inverse
m <- solve(temp) %*% temp
# Setting matrix inverse into m_matrix
m_matrix$setInverse(m)
# Return matrix inverse
}
mtrx <- makeCacheMatrix()
inv <- cacheSovle(mtrx)
inv <- cacheSolve(mtrx)
mtrx
mtrx$getMatrix()
mtrx$getInverse()
mat <- matrix(1:20, 4, 5)
mat
mtrx$setMatrix(mat)
mtrx$getMatrix()
cacheSolve(mtrx)
mat <- matrix(1:16, 4, 4)
mtrx$setMatrix(mat)
mtrx$getMatrix()
cacheSolve(mtrx)
mtrx$getInverse()
mtrx$setInverse()
message("Matrix Inverse is not Null")
# Construct a metrix that holds its inverse
makeCacheMatrix <- function(m = matrix()) {
# variable to hold matrix inverse
inv <- NULL
# Setting matrix to mtrx and inv to NULL
setMatrix <- function(mtrx) {
m <<- mtrx
inv <<- NULL
}
# Returns the original matrix
getMatrix <- function() {
m
}
# Setting matrix inverse
setInverse <- function(inverse) {
inv <<- inverse
}
# Getting matrix inverse
getInverse <- function() {
inv
}
# Retuns list of methods available in makeCacheMatrix
list(setMatrix = setMatrix, getMatrix = getMatrix,
setInverse = setInverse, getInverse = getInverse)
}
# Obtaining an inverse of the matrix m_matrix produced by makeCacheMatrix
cacheSolve <- function(m_matrix, ...) {
# Test if m_matrix already has an inverse storred in it
if(!is.null(m_matrix$getInverse())) {
return(m_matrix$getInverse())
message("Matrix Inverse is not Null")
}
# Calculating matrix inverse in two steps below
# 1. Getting original matrix
temp <- m_matrix$getMatrix()
# 2. Calculating matrix inverse
m <- solve(temp) %*% temp
# Setting matrix inverse into m_matrix
m_matrix$setInverse(m)
# Return matrix inverse
}
mtrx <- makeCacheMatrix(mat)
mtrx$getMatrix()
cacheSolve(mtrx)
# Construct a metrix that holds its inverse
makeCacheMatrix <- function(m = matrix()) {
# variable to hold matrix inverse
inv <- NULL
# Setting matrix to mtrx and inv to NULL
setMatrix <- function(mtrx) {
m <<- mtrx
inv <<- NULL
}
# Returns the original matrix
getMatrix <- function() {
m
}
# Setting matrix inverse
setInverse <- function(inverse) {
inv <<- inverse
}
# Getting matrix inverse
getInverse <- function() {
inv
}
# Retuns list of methods available in makeCacheMatrix
list(setMatrix = setMatrix, getMatrix = getMatrix,
setInverse = setInverse, getInverse = getInverse)
}
# Obtaining an inverse of the matrix m_matrix produced by makeCacheMatrix
cacheSolve <- function(m_matrix, ...) {
# Test if m_matrix already has an inverse storred in it
inverse <- m_matrix$getInverse()
if(!is.null(inverse)) {
return(inverse)
message("Matrix Inverse is not Null")
}
# Calculating matrix inverse in two steps below
# 1. Getting original matrix
temp <- m_matrix$getMatrix()
print("Printing temp matrix")
# 2. Calculating matrix inverse
m <- solve(temp) %*% temp
# Setting matrix inverse into m_matrix
m_matrix$setInverse(m)
# Return matrix inverse
}
mtrx <- makeCacheMatrix(mat)
mtrx.getMatrix()
mtrx$getMatrix()
cacheSolve(mtrx)
# Construct a metrix that holds its inverse
makeCacheMatrix <- function(m = matrix()) {
# variable to hold matrix inverse
inv <- NULL
# Setting matrix to mtrx and inv to NULL
setMatrix <- function(mtrx) {
m <<- mtrx
inv <<- NULL
}
# Returns the original matrix
getMatrix <- function() {
m
}
# Setting matrix inverse
setInverse <- function(inverse) {
inv <<- inverse
}
# Getting matrix inverse
getInverse <- function() {
inv
}
# Retuns list of methods available in makeCacheMatrix
list(setMatrix = setMatrix, getMatrix = getMatrix,
setInverse = setInverse, getInverse = getInverse)
}
# Obtaining an inverse of the matrix m_matrix produced by makeCacheMatrix
cacheSolve <- function(m_matrix, ...) {
# Test if m_matrix already has an inverse storred in it
inverse <- m_matrix$getInverse()
if(!is.null(inverse)) {
return(inverse)
message("Matrix Inverse is not Null")
}
# Calculating matrix inverse in two steps below
# 1. Getting original matrix
temp <- m_matrix$getMatrix()
print("Printing temp matrix")
# 2. Calculating matrix inverse
m <- solve(temp) %*% temp
print("solve worked")
# Setting matrix inverse into m_matrix
m_matrix$setInverse(m)
# Return matrix inverse
}
mtrx <- makeCacheMatrix(mat)
cacheSolve(mtrx)
mat <- matrix(rnorm(16), 4,4)
mat
mtrx <- makeCacheMatrix(mat)
cacheSolve(mtrx)
# Construct a metrix that holds its inverse
makeCacheMatrix <- function(m = matrix()) {
# variable to hold matrix inverse
inv <- NULL
# Setting matrix to mtrx and inv to NULL
setMatrix <- function(mtrx) {
m <<- mtrx
inv <<- NULL
}
# Returns the original matrix
getMatrix <- function() {
m
}
# Setting matrix inverse
setInverse <- function(inverse) {
inv <<- inverse
}
# Getting matrix inverse
getInverse <- function() {
inv
}
# Retuns list of methods available in makeCacheMatrix
list(setMatrix = setMatrix, getMatrix = getMatrix,
setInverse = setInverse, getInverse = getInverse)
}
# Obtaining an inverse of the matrix m_matrix produced by makeCacheMatrix
cacheSolve <- function(m_matrix, ...) {
# Test if m_matrix already has an inverse storred in it
inverse <- m_matrix$getInverse()
if(!is.null(inverse)) {
return(inverse)
message("Matrix Inverse is not Null")
}
# Calculating matrix inverse in two steps below
# 1. Getting original matrix
temp <- m_matrix$getMatrix()
print("Printing temp matrix")
# 2. Calculating matrix inverse
m <- solve(temp) %*% temp
print("solve worked")
# Setting matrix inverse into m_matrix
m_matrix$setInverse(m)
# Return matrix inverse
m
}
mtrx <- makeCacheMatrix(mat)
cacheSolve(mtrx)
# Construct a metrix that holds its inverse
makeCacheMatrix <- function(m = matrix()) {
# variable to hold matrix inverse
inv <- NULL
# Setting matrix to mtrx and inv to NULL
setMatrix <- function(mtrx) {
m <<- mtrx
inv <<- NULL
}
# Returns the original matrix
getMatrix <- function() {
m
}
# Setting matrix inverse
setInverse <- function(inverse) {
inv <<- inverse
}
# Getting matrix inverse
getInverse <- function() {
inv
}
# Retuns list of methods available in makeCacheMatrix
list(setMatrix = setMatrix, getMatrix = getMatrix,
setInverse = setInverse, getInverse = getInverse)
}
# Obtaining an inverse of the matrix m_matrix produced by makeCacheMatrix
cacheSolve <- function(m_matrix, ...) {
# Test if m_matrix already has an inverse storred in it
if(!is.null(m_matrix$getInverse())) {
return(m_matrix$getInverse())
}
# Calculating matrix inverse in two steps below
# 1. Getting original matrix
temp <- m_matrix$getMatrix()
# 2. Calculating matrix inverse
m <- solve(temp) %*% temp
# Setting matrix inverse into m_matrix
m_matrix$setInverse(m)
# Return matrix inverse
m
}
mtrx <- makeCacheMatrix(mat)
mtrx
mtrx <- makeCacheMatrix(mat)
cacheSolve(mtrx)
imtrx <- cacheSolve(mtrx)
mtrx$getMatrix()
solve(mtrx$getMatrix) %*% imtrx
